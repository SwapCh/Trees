#include <stdio.h>
#include <stdlib.h>

// Defining a Node of the tree
struct node {
    int data;
    struct node* left;
    struct node* right;
};
struct node* root = NULL;

struct node* createNode(int x) {
    struct node* newnode = (struct node*)malloc(sizeof(struct node));
    newnode->data = x;
    newnode->left = NULL;
    newnode->right = NULL;
    return newnode;
}

void insert(struct node** root1, int x) {
    if (*root1 == NULL) {
        *root1 = createNode(x);
    } else {
        if (x <= (*root1)->data) {
            insert(&((*root1)->left), x);
        } else {
            insert(&((*root1)->right), x);
        }
    }
}

int search(struct node* root, int key) {
    if (root == NULL) {
        return 0;
    }
    if (key == root->data) {
        return 1;
    } else if (key > root->data) {
        return search(root->right, key);
    }
    return search(root->left, key);
}

void Inorder(struct node* temp) {
    if (temp == NULL) {
        return;
    }

    Inorder(temp->left);
    printf("%d ", temp->data);
    Inorder(temp->right);
}

void Preorder(struct node* temp) {
    if (temp == NULL) {
        return;
    }
    printf("%d ", temp->data);
    Inorder(temp->left);
    Inorder(temp->right);
}

void Postorder(struct node* temp) {
    if (temp == NULL) {
        return;
    }

    Inorder(temp->left);
    Inorder(temp->right);
    printf("%d ", temp->data);
}

int main() {
    int choice, data, key;

    do {
        printf("\nMenu:\n");
        printf("1. Insert an element\n");
        printf("2. Search for an element\n");
        printf("3. Traverse the tree (Pre-order)\n");
        printf("4. Traverse the tree (In-order)\n");
        printf("5. Traverse the tree (Post-order)\n");
        printf("6. Exit\n");
        printf("Enter your choice: ");
        scanf("%d", &choice);

        switch (choice) {
            case 1:
                printf("Enter the element to insert: ");
                scanf("%d", &data);
                insert(&root, data);
                break;
            case 2:
                printf("Enter the element to search: ");
                scanf("%d", &key);
                if (search(root, key)) {
                    printf("Element %d found in the tree.\n", key);
                } else {
                    printf("Element %d not found in the tree.\n", key);
                }
                break;
            case 3:
                printf("Pre-order traversal of the tree: ");
                Preorder(root);
                printf("\n");
                break;
            case 4:
                printf("In-order traversal of the tree: ");
                Inorder(root);
                printf("\n");
                break;
            case 5:
                printf("Post-order traversal of the tree: ");
                Postorder(root);
                printf("\n");
                break;
            case 6:
                printf("Exiting the program.\n");
                exit(0);
                break;
            default:
                printf("Invalid choice. Please try again.\n");
        }
    } while (true);

    return 0;
}
